version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: drf_backend_web
    container_name: drf_backend_web
    command: /start.sh
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - services/.env.local
    depends_on:
      - redis
      - db

  db:
    image: timescale/timescaledb:latest-pg14
    restart: always
    container_name: db
    env_file:
      - services/.env.local
    expose:
      - 5432
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=timescale-db
      - POSTGRES_USER=timescale-db
      - POSTGRES_PASSWORD=catsaysmeow

  redis:
    image: redis:7-alpine
    container_name: drf_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery_worker:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: drf_celery_worker
    container_name: drf_celery_worker
    command: /start-worker.sh
    volumes:
      - .:/app
    env_file:
      - services/.env.local
    depends_on:
      - redis
      - db

  celery_beat:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: drf_celery_beat
    container_name: drf_celery_beat
    command: /start-beat.sh
    volumes:
      - .:/app
    env_file:
      - services/.env.local
    depends_on:
      - redis
      - db

  # ui:
  #   build:
  #     context: .
  #     dockerfile: ./compose/ui/Dockerfile
  #   image: react_dashboard
  #   container_name: react_dashboard
  #   command: /start-webpack.sh
  #   volumes:
  #     - .:/app
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     NODE_ENV: development

volumes:
  postgres_data:
  redis_data: